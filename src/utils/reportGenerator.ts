import { existsSync, readFileSync, writeFileSync } from 'fs';
import path from 'path';
import { generate, Options } from 'cucumber-html-reporter';
import { createRequire } from 'module';

// Use createRequire for CommonJS modules in ES module environment
const require = createRequire(import.meta.url);
const { generateMultipleFeatureReports } = require('multiple-cucumber-html-reporter');

export interface ReportOptions {
  testDir: string;
  projectName?: string;
  browser?: string;
  testType?: 'api' | 'ui';
}

export async function generateReports(options: ReportOptions): Promise<void> {
  const { testDir, projectName = 'GenAI Test Assistant', browser = 'chromium', testType = 'ui' } = options;
  
  const reportsDir = path.join(testDir, 'reports');
  const jsonReportPath = path.join(reportsDir, 'cucumber-report.json');
  
  // Check if JSON report exists
  if (!existsSync(jsonReportPath)) {
    console.log('‚ö†Ô∏è  No JSON report found, skipping HTML report generation');
    return;
  }

  console.log('üìä Generating comprehensive test reports...');

  // Generate basic HTML report
  await generateBasicHtmlReport(jsonReportPath, reportsDir, projectName, browser, testType);
  
  // Generate enhanced multiple feature report
  await generateEnhancedHtmlReport(reportsDir, projectName, browser, testType);
  
  // Generate summary report
  await generateSummaryReport(jsonReportPath, reportsDir, projectName, testType);
  
  console.log('‚úÖ Test reports generated successfully!');
  console.log(`üìÅ Reports location: ${reportsDir}`);
  console.log(`üåê Open: ${path.join(reportsDir, 'enhanced-report.html')}`);
}

async function generateBasicHtmlReport(
  jsonReportPath: string, 
  reportsDir: string, 
  projectName: string, 
  browser: string, 
  testType: string
): Promise<void> {
  const options: Options = {
    theme: 'bootstrap' as const,
    jsonFile: jsonReportPath,
    output: path.join(reportsDir, 'basic-report.html'),
    reportSuiteAsScenarios: true,
    scenarioTimestamp: true,
    launchReport: false,
    metadata: {
      "App Version": "1.0.0",
      "Test Environment": "Local",
      "Browser": browser,
      "Test Type": testType.toUpperCase(),
      "Platform": process.platform,
      "Parallel": "Scenarios",
      "Executed": new Date().toISOString().split('T')[0]
    },
    brandTitle: projectName,
    name: `${projectName} - ${testType.toUpperCase()} Test Report`
  };

  try {
    generate(options);
    console.log('üìÑ Basic HTML report generated');
  } catch (error) {
    console.warn('‚ö†Ô∏è  Failed to generate basic HTML report:', error instanceof Error ? error.message : error);
  }
}

async function generateEnhancedHtmlReport(
  reportsDir: string, 
  projectName: string, 
  browser: string, 
  testType: string
): Promise<void> {
  try {
    // Use dynamic import for better ES module compatibility
    const multipleReporter = await import('multiple-cucumber-html-reporter');
    
    if (multipleReporter.generateMultipleFeatureReports) {
      multipleReporter.generateMultipleFeatureReports({
        jsonDir: reportsDir,
        reportPath: reportsDir,
        reportName: 'enhanced-report.html',
        pageTitle: `${projectName} - Test Results`,
        displayDuration: true,
        displayReportTime: true,
        useCDN: true,
        pageFooter: `<div class="text-center">
          <p>Generated by GenAI Test Assistant | Test Type: ${testType.toUpperCase()} | Browser: ${browser}</p>
        </div>`,
        customData: {
          title: 'Test Execution Info',
          data: [
            {label: 'Project', value: projectName},
            {label: 'Test Type', value: testType.toUpperCase()},
            {label: 'Browser', value: browser},
            {label: 'Platform', value: process.platform},
            {label: 'Node Version', value: process.version},
            {label: 'Date', value: new Date().toLocaleDateString()},
            {label: 'Time', value: new Date().toLocaleTimeString()}
          ]
        }
      });
      console.log('üìä Enhanced HTML report generated');
    } else {
      console.log('üìä Enhanced report skipped (function not available)');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è  Failed to generate enhanced HTML report:', error instanceof Error ? error.message : error);
  }
}

async function generateSummaryReport(
  jsonReportPath: string, 
  reportsDir: string, 
  projectName: string, 
  testType: string
): Promise<void> {
  try {
    const jsonData = JSON.parse(readFileSync(jsonReportPath, 'utf8'));
    
    let totalScenarios = 0;
    let passedScenarios = 0;
    let failedScenarios = 0;
    let totalSteps = 0;
    let passedSteps = 0;
    let failedSteps = 0;
    let skippedSteps = 0;
    let totalDuration = 0;

    jsonData.forEach((feature: any) => {
      feature.elements?.forEach((scenario: any) => {
        totalScenarios++;
        let scenarioPassed = true;
        let scenarioDuration = 0;

        scenario.steps?.forEach((step: any) => {
          totalSteps++;
          const duration = step.result?.duration || 0;
          scenarioDuration += duration;
          
          if (step.result?.status === 'passed') {
            passedSteps++;
          } else if (step.result?.status === 'failed') {
            failedSteps++;
            scenarioPassed = false;
          } else if (step.result?.status === 'skipped') {
            skippedSteps++;
            scenarioPassed = false;
          }
        });

        totalDuration += scenarioDuration;
        if (scenarioPassed) {
          passedScenarios++;
        } else {
          failedScenarios++;
        }
      });
    });

    const summaryHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectName} - Test Summary</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px 8px 0 0; }
        .header h1 { margin: 0; font-size: 2em; }
        .header .subtitle { opacity: 0.9; margin-top: 5px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; padding: 20px; }
        .stat-card { background: #f8f9fa; border-radius: 8px; padding: 20px; text-align: center; border-left: 4px solid #667eea; }
        .stat-number { font-size: 2.5em; font-weight: bold; margin-bottom: 5px; }
        .stat-label { color: #666; font-size: 0.9em; text-transform: uppercase; letter-spacing: 1px; }
        .passed { color: #28a745; border-left-color: #28a745; }
        .failed { color: #dc3545; border-left-color: #dc3545; }
        .total { color: #6f42c1; border-left-color: #6f42c1; }
        .duration { color: #fd7e14; border-left-color: #fd7e14; }
        .info { padding: 20px; background: #e9ecef; margin: 20px; border-radius: 8px; }
        .info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; }
        .info-item { display: flex; justify-content: space-between; }
        .info-label { font-weight: bold; }
        .links { padding: 20px; text-align: center; }
        .btn { display: inline-block; padding: 12px 24px; margin: 0 10px; background: #667eea; color: white; text-decoration: none; border-radius: 6px; transition: background 0.3s; }
        .btn:hover { background: #5a67d8; }
        .footer { text-align: center; padding: 20px; color: #666; border-top: 1px solid #eee; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>${projectName}</h1>
            <div class="subtitle">${testType.toUpperCase()} Test Execution Summary</div>
        </div>
        
        <div class="stats">
            <div class="stat-card total">
                <div class="stat-number">${totalScenarios}</div>
                <div class="stat-label">Total Scenarios</div>
            </div>
            <div class="stat-card passed">
                <div class="stat-number">${passedScenarios}</div>
                <div class="stat-label">Passed</div>
            </div>
            <div class="stat-card failed">
                <div class="stat-number">${failedScenarios}</div>
                <div class="stat-label">Failed</div>
            </div>
            <div class="stat-card duration">
                <div class="stat-number">${(totalDuration / 1000000).toFixed(2)}s</div>
                <div class="stat-label">Duration</div>
            </div>
        </div>

        <div class="info">
            <h3>Execution Details</h3>
            <div class="info-grid">
                <div class="info-item">
                    <span class="info-label">Total Steps:</span>
                    <span>${totalSteps}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Passed Steps:</span>
                    <span style="color: #28a745;">${passedSteps}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Failed Steps:</span>
                    <span style="color: #dc3545;">${failedSteps}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Skipped Steps:</span>
                    <span style="color: #ffc107;">${skippedSteps}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Success Rate:</span>
                    <span>${totalScenarios > 0 ? ((passedScenarios / totalScenarios) * 100).toFixed(1) : 0}%</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Test Type:</span>
                    <span>${testType.toUpperCase()}</span>
                </div>
                <div class="info-item">
                    <span class="info-label">Generated:</span>
                    <span>${new Date().toLocaleString()}</span>
                </div>
            </div>
        </div>

        <div class="links">
            <a href="enhanced-report.html" class="btn">üìä Detailed Report</a>
            <a href="basic-report.html" class="btn">üìÑ Basic Report</a>
            <a href="cucumber-report.json" class="btn">üìù JSON Data</a>
        </div>

        <div class="footer">
            Generated by GenAI Test Assistant | ${new Date().toLocaleDateString()}
        </div>
    </div>
</body>
</html>`;

    writeFileSync(path.join(reportsDir, 'summary.html'), summaryHtml);
    console.log('üìã Summary report generated');
  } catch (error) {
    console.warn('‚ö†Ô∏è  Failed to generate summary report:', error instanceof Error ? error.message : error);
  }
}